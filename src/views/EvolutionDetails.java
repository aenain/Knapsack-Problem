/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EvolutionDetails.java
 *
 * Created on Jun 5, 2012, 3:18:28 PM
 */
package views;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;
import controllers.EvolutionController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.UIManager;
import models.Item;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;

/**
 *
 * @author arturhebda
 */
public class EvolutionDetails extends javax.swing.JFrame {

    private JFreeChart chart;
    /** Creates new form EvolutionDetails */
    public EvolutionDetails() {
        initComponents();
        myInitComponents();
    }
    
    public void setChart(JFreeChart chart) {
        this.chart = chart;
    }

    private void myInitComponents() {
        dynamicAlgorithmResult = new JLabel();
        dynamicAlgorithmResult.setForeground(Color.BLACK);
        dynamicAlgorithmResult.setSize(400, 28);
        dynamicAlgorithmResult.setLocation(dynamicAlgorithmSteeringButton.getLocation());
        dynamicAlgorithmResult.setVisible(false);

        dynamicAlgorithmSteeringButton.getParent().add(dynamicAlgorithmResult, BorderLayout.SOUTH);

        dynamicAlgorithmItemList.setModel(dynamicAlgorithmItemsModel);
        geneticAlgorithmItemList.setModel(geneticAlgorithmItemsModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmTabs = new javax.swing.JTabbedPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        geneticAlgorithmItemList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        dynamicAlgorithmItemList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bestGeneticAlgorithmResult = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        dynamicAlgorithmSteeringButton = new javax.swing.JButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        exportToPdfButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("Evolution's Details");

        algorithmTabs.setEnabled(false);

        geneticAlgorithmItemList.setEnabled(false);
        jScrollPane1.setViewportView(geneticAlgorithmItemList);

        jScrollPane1.setBounds(10, 40, 600, 320);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel2.setText("Taken Items");
        jLabel2.setBounds(10, 10, 140, 19);
        jLayeredPane1.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        algorithmTabs.addTab("Genetic", jLayeredPane1);

        dynamicAlgorithmItemList.setEnabled(false);
        jScrollPane2.setViewportView(dynamicAlgorithmItemList);

        jScrollPane2.setBounds(10, 40, 600, 320);
        jLayeredPane2.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setText("Taken Items");
        jLabel1.setBounds(10, 10, 140, 19);
        jLayeredPane2.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        algorithmTabs.addTab("Dynamic", jLayeredPane2);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel3.setText("Best Results");

        jLabel4.setForeground(new java.awt.Color(103, 103, 103));
        jLabel4.setText("Genetic Algorithm");

        jLabel5.setForeground(new java.awt.Color(103, 103, 103));
        jLabel5.setText("Dynamic Algorithm");

        bestGeneticAlgorithmResult.setText("1000 PLN by 50 kg (out of 51 kg)");

        dynamicAlgorithmSteeringButton.setText("Start");
        dynamicAlgorithmSteeringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dynamicAlgorithmSteeringButtonActionPerformed(evt);
            }
        });
        dynamicAlgorithmSteeringButton.setBounds(0, 0, 57, 23);
        jLayeredPane3.add(dynamicAlgorithmSteeringButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        exportToPdfButton.setText("Export to PDF");
        exportToPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToPdfButtonActionPerformed(evt);
            }
        });
        exportToPdfButton.setBounds(500, 0, 99, 23);
        jLayeredPane4.add(exportToPdfButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closeButton.setBounds(420, 0, 59, 23);
        jLayeredPane4.add(closeButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLayeredPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 655, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(33, 33, 33)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(layout.createSequentialGroup()
                                .add(24, 24, 24)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel4)
                                    .add(jLabel5))
                                .add(26, 26, 26)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLayeredPane3)
                                    .add(bestGeneticAlgorithmResult, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(algorithmTabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(algorithmTabs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 418, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(bestGeneticAlgorithmResult))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .add(24, 24, 24))
                    .add(layout.createSequentialGroup()
                        .add(jLayeredPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                .add(jLayeredPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportToPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToPdfButtonActionPerformed
        // TODO add your handling code here:      
        try {
            ChartUtilities.saveChartAsPNG(new File("C:/Users/Mateusz/Desktop/obraz.jpg"), chart, 700, 430);
            writeChartToPDF(chart, 700, 430, "C:/Users/Mateusz/Desktop/barchart2.pdf");
        } catch (Exception ex) {
            Logger.getLogger(EvolutionDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportToPdfButtonActionPerformed

    private void dynamicAlgorithmSteeringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dynamicAlgorithmSteeringButtonActionPerformed
        String label = dynamicAlgorithmSteeringButton.getText();

        if (label.equals("Start")) {
            dynamicAlgorithmSteeringButton.setText("Stop");
            controller.startDynamicAlgorithm();
        }
        else if (label.equals("Stop")) {
            dynamicAlgorithmSteeringButton.setText("Start");
            controller.stopDynamicAlgorithm();
        }
    }//GEN-LAST:event_dynamicAlgorithmSteeringButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        controller.setEvolutionDetails(null);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    public void writeChartToPDF(JFreeChart chart, int width, int height, String fileName) throws DocumentException, FileNotFoundException, IOException {
        PdfWriter writer;
    
        Document document = new Document();
	    
        BaseFont arial = BaseFont.createFont("arial.ttf", BaseFont.WINANSI, BaseFont.NOT_EMBEDDED);
		
        Font normalFont = new Font(arial, 11, Font.NORMAL);
        Font adnotationFont = new Font(arial, 10, Font.NORMAL);
        Font headers = new Font(arial, 11, Font.BOLD);
        Font titleFont = new Font(arial, 14, Font.BOLD);
        Font mainHeaders = new Font(arial, 12, Font.BOLD);
        Font itemVal = new Font(arial, 11, Font.NORMAL);
        Font itemWeight = new Font(arial, 8, Font.NORMAL);
        Font pipe = new Font(arial, 8, Font.NORMAL);
        Font bestWeight = new Font(arial, 12, Font.BOLD);
        Font bestVal = new Font(arial, 12, Font.BOLD);
        
        adnotationFont.setColor(128, 128, 128);
        itemVal.setColor(0, 102, 204);
        itemWeight.setColor(76, 76, 76);
        pipe.setColor(204, 204, 204);
        bestVal.setColor(0, 102, 204);
        bestWeight.setColor(Color.BLACK);
        
        Paragraph paragraph = new Paragraph();
	 
	    try {
	        writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
	        document.open();
	        
	        paragraph.add(new Phrase("0-1 Knapsack Problem", titleFont));
	        paragraph.setAlignment(Element.ALIGN_CENTER);
	        
	        document.add(paragraph);
	        document.add(Chunk.NEWLINE);
	        document.add(Chunk.NEWLINE);
	        document.add(Chunk.NEWLINE);
	        
	        paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Brief Summary", mainHeaders));
	        paragraph.add(Chunk.NEWLINE);
	        document.add(paragraph);
	        paragraph.clear();
	        document.add(Chunk.NEWLINE);
	        
//			====================================	        

	        PdfPTable table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);
	        table.addCell("");
	        
	        PdfPCell cell = new PdfPCell(new Phrase("Genetic algorithm", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(cell);
	        
	        cell.setPhrase(new Phrase("Dynamic algorithm", new Font(normalFont)));
	        cell.getPhrase().getFont().setColor(128, 128, 128);
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase("Value", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        table.addCell(cell);
	        
	        cell.setPhrase(new Phrase(controller.getEvolution().getBestGenomeEver().getValue()+" PLN", bestVal));
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(cell);
	        
	        if(controller.hasDynamicAlgorithmResult()) {
                    cell.setPhrase(new Phrase(controller.getDynamicAlgorithm().getValue()+" PLN", bestVal));
                } else {
                    cell.setPhrase(new Phrase("n.a.", bestVal));
                }
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase("Weight", normalFont));
	        cell.getPhrase().add(new Phrase(" (out of "+controller.getParametersController().getKnapsackCapacity()+" kg)", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        table.addCell(cell);
	        
	        cell.setPhrase(new Phrase(controller.getEvolution().getBestGenomeEver().getWeigth()+" kg", bestWeight));
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(cell);
	        
                
                if(controller.hasDynamicAlgorithmResult()) {
                    cell.setPhrase(new Phrase(controller.getDynamicAlgorithm().getWeight()+" kg", bestWeight));
                } else {
                    cell.setPhrase(new Phrase("n.a.", bestWeight));
                }
	        table.addCell(cell);

	        cell = new PdfPCell(new Phrase("Computing Time", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        table.addCell(cell);
                
                DecimalFormat df = new DecimalFormat("#0.0000");
                String output = df.format(controller.getEvolution().getExecutionTime()/1000F);
	        
	        cell.setPhrase(new Phrase(output+" s", normalFont));
	        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(cell);
	        
	        if(controller.hasDynamicAlgorithmResult()) {
                    output = df.format(controller.getDynamicAlgorithm().getExecutionTime()/1000F);
                    cell.setPhrase(new Phrase(output+" s", normalFont));
                } else {
                    cell.setPhrase(new Phrase("n.a.", normalFont));
                }
	        table.addCell(cell);
	        document.add(table);
	        
	        
	        for(int i = 0; i < 3; i++) {
	        	document.add(Chunk.NEWLINE);
	        }
	        	        
	        
	        
//			====================================	        
   
	        
	        paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Genetic Parameters", mainHeaders));
	        paragraph.add(Chunk.NEWLINE);
	        document.add(paragraph);
	        
	        table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);

	        cell = new PdfPCell(new Phrase("Population Size", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(""+controller.getParametersController().getPopulationSize(), adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        
	        cell = new PdfPCell(new Phrase("Generations Limit", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(""+controller.getParametersController().getGenerationsLimit(), adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        document.add(table);
	        document.add(Chunk.NEWLINE);
	        
//			====================================	        
  
	        
	        
	        table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);

	        cell = new PdfPCell(new Phrase("Elitism Rate", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(""+controller.getParametersController().getElitismRate(), adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        
	        cell = new PdfPCell(new Phrase("Selection Method", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(controller.getParametersController().getSelectionMethod()+"", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        document.add(table);
	        document.add(Chunk.NEWLINE);
	        
	        
//	      ====================================	     
	        
	        table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);

	        cell = new PdfPCell(new Phrase("Crossover Rate", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(controller.getParametersController().getCrossoverRate()+"", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        
	        cell = new PdfPCell(new Phrase("Crossover Method", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(controller.getParametersController().getCrossoverMethod()+"", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        document.add(table);
	        document.add(Chunk.NEWLINE);
	        
//			====================================	        
	        
	        
	        table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);

	        cell = new PdfPCell(new Phrase("Mutation Rate", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(controller.getParametersController().getMutationRate()+"", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        
	        cell = new PdfPCell(new Phrase("Repair/Penalty Method", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(30);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        cell = new PdfPCell(new Phrase(controller.getParametersController().getRepairOrPenaltyMethod()+"", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(40);
	        cell.setPadding(4);
	        table.addCell(cell);
	        
	        document.add(table);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);
	        
//			====================================	        

	        paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Available Items", mainHeaders));
	        document.add(paragraph);
	        
                Item[] items = controller.getEvolution().getItems();
                
                paragraph.clear();
                for(Item x: items) {
                    paragraph.add(new Phrase(x.getValue()+"", itemVal));
                    paragraph.add(new Phrase("|", pipe));
                    paragraph.add(new Phrase(x.getWeigth()+"  ", itemWeight));
                }
                
                document.add(paragraph);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);
	        
//			====================================	        
        
	        paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Genetic Algorihtm's Process", mainHeaders));
	        document.add(paragraph);
	        document.add(Chunk.NEWLINE);       
	        
	        table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);

	        cell = new PdfPCell(new Phrase("Generations", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(60);
	        cell.setPadding(4);
	        table.addCell(cell);

                
	        cell = new PdfPCell(new Phrase((controller.getEvolution().getEvolutionSummary().getIteration().intValue()+1)+"", normalFont));
	        cell.getPhrase().add(new Phrase(" (out of "+controller.getParametersController().getGenerationsLimit()+")", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(80);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        cell.setPadding(4);
	        table.addCell(cell);
                
                cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
	        
	        
	        cell = new PdfPCell(new Phrase("Computing Time", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(60);
	        cell.setPadding(4);
	        table.addCell(cell);
                
                output = df.format(controller.getEvolution().getExecutionTime()/1000F);

	        cell = new PdfPCell(new Phrase(output+" s", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(0);
	        cell.setPadding(4);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        table.addCell(cell);
	        
                cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
                
	        document.add(table);
                //document.newPage();
                
                /*
                PdfContentByte contentByte = writer.getDirectContent();
	        PdfTemplate template = contentByte.createTemplate(width, height);
	        Graphics2D graphics2d = template.createGraphics(width, height, new DefaultFontMapper());
	        Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, width, height);
	 
	        chart.draw(graphics2d, rectangle2d);
	 
	        graphics2d.dispose();
	        contentByte.addTemplate(template, 38, writer.getVerticalPosition(true)-height);
                * 
                */
                
                Image image = Image.getInstance("C:/Users/Mateusz/Desktop/obraz.jpg");
                image.scaleToFit(550, 350);
		document.add(image);
                
                for(int i = 0; i < 2; i++) {
                    document.add(Chunk.NEWLINE);
                }
	       	        
//			====================================	
                
                paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Best Genome", headers));
	        document.add(paragraph);
	        document.add(Chunk.NEWLINE);
                
                paragraph.clear();
                for(Item x: controller.getEvolution().getEvolutionSummary().getBestGenomeItems()) {
                    paragraph.add(new Phrase(x.getValue()+"", itemVal));
                    paragraph.add(new Phrase("|", pipe));
                    paragraph.add(new Phrase(x.getWeigth()+"  ", itemWeight));
                }
                
                document.add(paragraph);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);

//			====================================	

                table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);
                
                table.addCell("");

	        cell = new PdfPCell(new Phrase("Total Value", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
                cell.setIndent(30);
                cell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(controller.getEvolution().getBestGenomeEver().getValue()+" PLN", bestVal));
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        table.addCell(cell);
                
                table.addCell("");
                
                cell = new PdfPCell(new Phrase("Total Weight", normalFont));
                cell.getPhrase().add(new Phrase(" (out of "+controller.getParametersController().getKnapsackCapacity()+" kg)", adnotationFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
                cell.setIndent(30);
                cell.setHorizontalAlignment(Element.ALIGN_LEFT);
	        cell.setPadding(4);
	        table.addCell(cell);

	        cell.setPhrase(new Phrase(controller.getEvolution().getBestGenomeEver().getWeigth()+" kg", bestWeight));
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        table.addCell(cell);
                
                document.add(table);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);

//			====================================	
                
                paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Dynamic Algorithm's Summary", headers));
	        document.add(paragraph);
	        document.add(Chunk.NEWLINE);
                
                table = new PdfPTable(3);
	        
	        table.getDefaultCell().setBorder(0);
	        table.setWidthPercentage(100);
	        
	        cell = new PdfPCell(new Phrase("Computing Time", normalFont));
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(60);
	        cell.setPadding(4);
	        table.addCell(cell);
                
                if(controller.hasDynamicAlgorithmResult()) {
                    output = df.format(controller.getDynamicAlgorithm().getExecutionTime()/1000F);
                    cell = new PdfPCell(new Phrase(output+" s", adnotationFont));
                } else {
                    cell = new PdfPCell(new Phrase("n.a.", adnotationFont));
                }
                
	        cell.setBorder(0);
	        cell.setFixedHeight(20);
	        cell.setIndent(0);
	        cell.setPadding(4);
                cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
	        table.addCell(cell);
	        
                cell.setPhrase(new Phrase(""));
	        table.addCell(cell);
                
                document.add(table);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);
                
//			====================================	

                paragraph.clear();
	        paragraph.setAlignment(Element.ALIGN_LEFT);
	        
	        paragraph.add(new Phrase("Result", headers));
	        document.add(paragraph);
	        document.add(Chunk.NEWLINE);
                
                paragraph.clear();
                
                if(controller.hasDynamicAlgorithmResult()) {
                    for(Item x: controller.getDynamicAlgorithm().getTakenItems()) {
                        paragraph.add(new Phrase(x.getValue()+"", itemVal));
                        paragraph.add(new Phrase("|", pipe));
                        paragraph.add(new Phrase(x.getWeigth()+"  ", itemWeight));
                    }
                } else {
                    paragraph.add(new Phrase("n.a.", normalFont));
                }
                
                document.add(paragraph);
                document.add(Chunk.NEWLINE);
                document.add(Chunk.NEWLINE);
                
//			====================================	
                
                
            } finally {
                document.close();
            }
    }
    
    public static void show(final EvolutionController controller, final MainWindow mainWindow) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {}

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                EvolutionDetails details = new EvolutionDetails();
                details.setController(controller);
                details.setMainWindow(mainWindow);
                details.populateResults();
                details.setLocationRelativeTo(null);
                details.setVisible(true);
            }
        });
    }

    public void setController(EvolutionController controller) {
        this.controller = controller;
        controller.setEvolutionDetails(this);
    }

    public void populateResults() {
        if (controller.hasDynamicAlgorithmResult())
            populateDynamicAlgorithmResults();

        controller.populateGeneticAlgorithmResults(bestGeneticAlgorithmResult);
    }

    public void populateDynamicAlgorithmResults() {
        algorithmTabs.setEnabled(true);
        dynamicAlgorithmSteeringButton.setVisible(false);

        JComponent[] components = new JComponent[] {dynamicAlgorithmResult, algorithmTabs};
        controller.populateDynamicAlgorithmResults(components);
    }

    public static DefaultListModel dynamicAlgorithmItemsModel = new DefaultListModel();
    public static DefaultListModel geneticAlgorithmItemsModel = new DefaultListModel();

    private EvolutionController controller;
    private javax.swing.JLabel dynamicAlgorithmResult;
    private javax.swing.JButton stopDynamicAlgorithmButton;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane algorithmTabs;
    private javax.swing.JLabel bestGeneticAlgorithmResult;
    private javax.swing.JButton closeButton;
    private javax.swing.JList dynamicAlgorithmItemList;
    private javax.swing.JButton dynamicAlgorithmSteeringButton;
    private javax.swing.JButton exportToPdfButton;
    private javax.swing.JList geneticAlgorithmItemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    // just to make sure that there will be only ONE frame evolutionDetails at a time.
    private void setMainWindow(MainWindow mainWindow) {
        mainWindow.setEvolutionDetails(this);
    }
}
